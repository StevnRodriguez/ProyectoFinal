import { Injectable } from '@angular/core';
import { Facebook } from './facebook';
import { Twitter } from './twitter';
import { Google } from './google';
import { Instagram } from './instagram';
import { Custom } from './custom';
import { Initials } from './initials';
import { Gravatar } from './gravatar';
import { Skype } from './skype';
import { Value } from './value';
import { Vkontakte } from './vkontakte';
import { Github } from './github';
import { AvatarSource } from './avatar-source.enum';
import { AvatarConfigService } from '../avatar-config.service';
import { defaultDisableSrcCache } from '../avatar.service';
import { CustomNoCache } from './custom-no-cache';
import * as i0 from "@angular/core";
import * as i1 from "../avatar-config.service";
/**
 * Factory class that implements factory method pattern.
 * Used to create Source implementation class based
 * on the source Type
 */
class SourceFactory {
    constructor(avatarConfigService) {
        this.sources = {};
        const disableSrcCache = avatarConfigService.getDisableSrcCache(defaultDisableSrcCache);
        this.sources[AvatarSource.FACEBOOK] = Facebook;
        this.sources[AvatarSource.TWITTER] = Twitter;
        this.sources[AvatarSource.GOOGLE] = Google;
        this.sources[AvatarSource.INSTAGRAM] = Instagram;
        this.sources[AvatarSource.SKYPE] = Skype;
        this.sources[AvatarSource.GRAVATAR] = Gravatar;
        this.sources[AvatarSource.CUSTOM] = disableSrcCache ? CustomNoCache : Custom;
        this.sources[AvatarSource.INITIALS] = Initials;
        this.sources[AvatarSource.VALUE] = Value;
        this.sources[AvatarSource.VKONTAKTE] = Vkontakte;
        this.sources[AvatarSource.GITHUB] = Github;
    }
    newInstance(sourceType, sourceValue) {
        return new this.sources[sourceType](sourceValue);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: SourceFactory, deps: [{ token: i1.AvatarConfigService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: SourceFactory, providedIn: 'root' }); }
}
export { SourceFactory };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: SourceFactory, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.AvatarConfigService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtYXZhdGFycy9zcmMvbGliL3NvdXJjZXMvc291cmNlLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDcEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzNELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7O0FBRWxEOzs7O0dBSUc7QUFDSCxNQUNhLGFBQWE7SUFHeEIsWUFBWSxtQkFBd0M7UUFGNUMsWUFBTyxHQUFxQyxFQUFFLENBQUM7UUFHckQsTUFBTSxlQUFlLEdBQUcsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUN2RixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUM7UUFDakQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQzdFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQztJQUM3QyxDQUFDO0lBRU0sV0FBVyxDQUFDLFVBQXdCLEVBQUUsV0FBbUI7UUFDOUQsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs4R0FwQlUsYUFBYTtrSEFBYixhQUFhLGNBREQsTUFBTTs7U0FDbEIsYUFBYTsyRkFBYixhQUFhO2tCQUR6QixVQUFVO21CQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU291cmNlIH0gZnJvbSAnLi9zb3VyY2UnO1xyXG5pbXBvcnQgeyBGYWNlYm9vayB9IGZyb20gJy4vZmFjZWJvb2snO1xyXG5pbXBvcnQgeyBUd2l0dGVyIH0gZnJvbSAnLi90d2l0dGVyJztcclxuaW1wb3J0IHsgR29vZ2xlIH0gZnJvbSAnLi9nb29nbGUnO1xyXG5pbXBvcnQgeyBJbnN0YWdyYW0gfSBmcm9tICcuL2luc3RhZ3JhbSc7XHJcbmltcG9ydCB7IEN1c3RvbSB9IGZyb20gJy4vY3VzdG9tJztcclxuaW1wb3J0IHsgSW5pdGlhbHMgfSBmcm9tICcuL2luaXRpYWxzJztcclxuaW1wb3J0IHsgR3JhdmF0YXIgfSBmcm9tICcuL2dyYXZhdGFyJztcclxuaW1wb3J0IHsgU2t5cGUgfSBmcm9tICcuL3NreXBlJztcclxuaW1wb3J0IHsgVmFsdWUgfSBmcm9tICcuL3ZhbHVlJztcclxuaW1wb3J0IHsgVmtvbnRha3RlIH0gZnJvbSAnLi92a29udGFrdGUnO1xyXG5pbXBvcnQgeyBHaXRodWIgfSBmcm9tICcuL2dpdGh1Yic7XHJcbmltcG9ydCB7IFNvdXJjZUNyZWF0b3IgfSBmcm9tICcuL3NvdXJjZS5jcmVhdG9yJztcclxuaW1wb3J0IHsgQXZhdGFyU291cmNlIH0gZnJvbSAnLi9hdmF0YXItc291cmNlLmVudW0nO1xyXG5pbXBvcnQgeyBBdmF0YXJDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vYXZhdGFyLWNvbmZpZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgZGVmYXVsdERpc2FibGVTcmNDYWNoZSB9IGZyb20gJy4uL2F2YXRhci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ3VzdG9tTm9DYWNoZSB9IGZyb20gJy4vY3VzdG9tLW5vLWNhY2hlJztcclxuXHJcbi8qKlxyXG4gKiBGYWN0b3J5IGNsYXNzIHRoYXQgaW1wbGVtZW50cyBmYWN0b3J5IG1ldGhvZCBwYXR0ZXJuLlxyXG4gKiBVc2VkIHRvIGNyZWF0ZSBTb3VyY2UgaW1wbGVtZW50YXRpb24gY2xhc3MgYmFzZWRcclxuICogb24gdGhlIHNvdXJjZSBUeXBlXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcclxuZXhwb3J0IGNsYXNzIFNvdXJjZUZhY3Rvcnkge1xyXG4gIHByaXZhdGUgc291cmNlczogeyBba2V5OiBzdHJpbmddOiBTb3VyY2VDcmVhdG9yIH0gPSB7fTtcclxuXHJcbiAgY29uc3RydWN0b3IoYXZhdGFyQ29uZmlnU2VydmljZTogQXZhdGFyQ29uZmlnU2VydmljZSkge1xyXG4gICAgY29uc3QgZGlzYWJsZVNyY0NhY2hlID0gYXZhdGFyQ29uZmlnU2VydmljZS5nZXREaXNhYmxlU3JjQ2FjaGUoZGVmYXVsdERpc2FibGVTcmNDYWNoZSk7XHJcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLkZBQ0VCT09LXSA9IEZhY2Vib29rO1xyXG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5UV0lUVEVSXSA9IFR3aXR0ZXI7XHJcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLkdPT0dMRV0gPSBHb29nbGU7XHJcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLklOU1RBR1JBTV0gPSBJbnN0YWdyYW07XHJcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLlNLWVBFXSA9IFNreXBlO1xyXG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5HUkFWQVRBUl0gPSBHcmF2YXRhcjtcclxuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuQ1VTVE9NXSA9IGRpc2FibGVTcmNDYWNoZSA/IEN1c3RvbU5vQ2FjaGUgOiBDdXN0b207XHJcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLklOSVRJQUxTXSA9IEluaXRpYWxzO1xyXG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5WQUxVRV0gPSBWYWx1ZTtcclxuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuVktPTlRBS1RFXSA9IFZrb250YWt0ZTtcclxuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuR0lUSFVCXSA9IEdpdGh1YjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBuZXdJbnN0YW5jZShzb3VyY2VUeXBlOiBBdmF0YXJTb3VyY2UsIHNvdXJjZVZhbHVlOiBzdHJpbmcpOiBTb3VyY2Uge1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzLnNvdXJjZXNbc291cmNlVHlwZV0oc291cmNlVmFsdWUpO1xyXG4gIH1cclxufVxyXG4iXX0=